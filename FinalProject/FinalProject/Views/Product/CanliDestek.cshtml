@{
    ViewData["Title"] = "Canlı Destek";
}

<div class="container">
    <h1>@ViewData["Title"]</h1>
    <div id="chat-container">
        <div id="messages" class="border p-3 mb-3" style="height: 400px; overflow-y: scroll;">
            <!-- Mesajlar buraya eklenecek -->
        </div>
        <form id="message-form">
            <div class="form-group">
                <input type="text" id="message-input" class="form-control" placeholder="Mesajınızı yazın..." required />
            </div>
            <button type="submit" class="btn btn-primary" style="margin-top: 10px;">Gönder</button>
        </form>
    </div>
</div>

@section Styles {
    <style>
        /* Mesaj baloncukları için stil */
        .message-bubble {
            max-width: 60%;
            padding: 10px 15px;
            margin: 5px 0;
            border-radius: 20px; /* Köşeleri yuvarlar */
            position: relative;
            word-wrap: break-word;
            display: inline-block; /* Baloncukları yan yana getirir */
        }

        /* Kullanıcıdan gelen mesajlar (sağa hizalanmış) */
        .message-bubble.user-message {
            background-color: #007aff; /* iMessage mavi rengi */
            color: white; /* Yazı rengi beyaz */
            margin-left: auto; /* Sağda hizalar */
            text-align: right;
            border: none; /* Kenar çerçevesini kaldırır */
            align-self: flex-end; /* Sağda hizalar */
        }

        /* Diğer kullanıcılar ya da sunucu mesajları (sola hizalanmış) */
        .message-bubble.other-message {
            background-color: #f0f0f5; /* Hafif gri arka plan */
            color: #000; /* Yazı rengi siyah */
            border: none; /* Kenar çerçevesini kaldırır */
            align-self: flex-start; /* Solda hizalar */
        }

        /* Mesajları konteynerde alt alta hizalamak için stil */
        #messages {
            display: flex;
            flex-direction: column; /* Mesajları alt alta sıralar */
            align-items: flex-start; /* Mesajları sola hizalar */
        }

        /* Zaman bilgisinin stili */
        .message-bubble small {
            display: block;
            font-size: 0.8em;
            color: #000;
            font-weight: bold;
            margin-bottom: 5px; /* Mesaj ile zaman arasında boşluk */
        }


    </style>
}

@section Scripts {
    <script>
        const messageForm = document.getElementById('message-form');
        const messageInput = document.getElementById('message-input');
        const messagesDiv = document.getElementById('messages');

        messageForm.addEventListener('submit', function (e) {
            e.preventDefault();

            // Mesajı al ve ekrana ekle
            const message = messageInput.value;
            addMessage(message, 'user-message');

            // Girdi alanını temizle
            messageInput.value = '';
        });

        function addMessage(message, type) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message-bubble', type);

            // Şu anki saati al
            const now = new Date();
            const timeString = now.getHours().toString().padStart(2, '0') + ':' + now.getMinutes().toString().padStart(2, '0');

            // Zaman bilgisini ekle
            const timeElement = document.createElement('small');
            timeElement.className = 'text-muted';
            timeElement.textContent = timeString;
            messageElement.appendChild(timeElement);

            // Mesajı ekle
            const messageTextElement = document.createElement('div');
            messageTextElement.textContent = message;
            messageElement.appendChild(messageTextElement);

            messagesDiv.appendChild(messageElement);

            // Mesaj kutusunu en alta kaydır
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }
    </script>
}




@* @section Scripts {
    <script>
        const messageForm = document.getElementById('message-form');
        const messageInput = document.getElementById('message-input');
        const messagesDiv = document.getElementById('messages');

        messageForm.addEventListener('submit', function (e) {
            e.preventDefault();
            sendMessage(messageInput.value);
            messageInput.value = '';
        });

        function sendMessage(message) {
            fetch('/Support/SendMessage', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ message: message })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        addMessage(data.message);
                    }
                })
                .catch(error => console.error('Error:', error));
        }

        function addMessage(message) {
            const messageElement = document.createElement('div');
            messageElement.textContent = message;
            messagesDiv.appendChild(messageElement);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        function loadMessages() {
            fetch('/Support/GetMessages')
                .then(response => response.json())
                .then(data => {
                    data.forEach(message => addMessage(message));
                })
                .catch(error => console.error('Error:', error));
        }

        // Mesajları yükle
        loadMessages();
        // Mesajları düzenli olarak güncelle
        setInterval(loadMessages, 5000);
    </script>
} *@
